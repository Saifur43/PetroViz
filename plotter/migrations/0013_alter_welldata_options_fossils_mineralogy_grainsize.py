# Generated by Django 5.0.2 on 2025-09-28 06:43

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('plotter', '0012_operationactivity'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='welldata',
            options={'verbose_name': 'Petro Analysis', 'verbose_name_plural': 'Petro Analyses'},
        ),
        migrations.CreateModel(
            name='Fossils',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sampling_depth_start', models.FloatField(help_text='Start sampling depth in meters')),
                ('sampling_depth_end', models.FloatField(help_text='End sampling depth in meters')),
                ('fossil_type', models.CharField(choices=[('foraminifera', 'Foraminifera'), ('nannofossils', 'Nannofossils'), ('dinoflagellates', 'Dinoflagellates'), ('pollen_spores', 'Pollen & Spores'), ('ostracods', 'Ostracods'), ('radiolaria', 'Radiolaria'), ('diatoms', 'Diatoms'), ('mollusks', 'Mollusks'), ('brachiopods', 'Brachiopods'), ('echinoderms', 'Echinoderms'), ('trilobites', 'Trilobites'), ('corals', 'Corals'), ('bryozoans', 'Bryozoans'), ('plant_remains', 'Plant Remains'), ('trace_fossils', 'Trace Fossils'), ('other', 'Other')], help_text='Type of fossil identified', max_length=20)),
                ('species_name', models.CharField(blank=True, help_text='Scientific name of the species', max_length=200, null=True)),
                ('abundance', models.CharField(choices=[('absent', 'Absent'), ('rare', 'Rare'), ('few', 'Few'), ('common', 'Common'), ('abundant', 'Abundant'), ('very_abundant', 'Very Abundant')], default='absent', help_text='Relative abundance of the fossil', max_length=15)),
                ('preservation', models.CharField(blank=True, choices=[('excellent', 'Excellent'), ('good', 'Good'), ('moderate', 'Moderate'), ('poor', 'Poor'), ('very_poor', 'Very Poor')], help_text='Quality of fossil preservation', max_length=10, null=True)),
                ('age_indication', models.CharField(blank=True, help_text='Geological age indication (e.g., Miocene, Pliocene)', max_length=100, null=True)),
                ('environmental_indication', models.CharField(blank=True, help_text='Paleoenvironmental indication', max_length=200, null=True)),
                ('other_fossil_type', models.CharField(blank=True, help_text="Custom fossil type if 'other' is selected", max_length=100, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the fossil', null=True)),
                ('image', models.ImageField(blank=True, help_text='Image of the fossil', null=True, upload_to='fossil_images/')),
                ('identified_by', models.CharField(blank=True, help_text='Name of the paleontologist who identified the fossil', max_length=100, null=True)),
                ('identification_date', models.DateField(blank=True, help_text='Date of fossil identification', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('core', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fossils', to='plotter.core')),
            ],
            options={
                'verbose_name': 'Fossil',
                'verbose_name_plural': 'Fossils',
                'ordering': ['sampling_depth_start', 'fossil_type'],
            },
        ),
        migrations.CreateModel(
            name='Mineralogy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sampling_depth_start', models.FloatField(help_text='Start sampling depth in meters')),
                ('sampling_depth_end', models.FloatField(help_text='End sampling depth in meters')),
                ('analysis_type', models.CharField(choices=[('bulk', 'Bulk Mineralogy'), ('clay', 'Clay Mineralogy')], help_text='Type of mineralogy analysis', max_length=10)),
                ('mineral_name', models.CharField(choices=[('quartz', 'Quartz'), ('albite', 'Albite'), ('muscovite', 'Muscovite'), ('clinochlore', 'Clinochlore'), ('rutile', 'Rutile'), ('calcite', 'Calcite'), ('dolomite', 'Dolomite'), ('feldspar', 'Feldspar'), ('plagioclase', 'Plagioclase'), ('biotite', 'Biotite'), ('chlorite', 'Chlorite'), ('pyrite', 'Pyrite'), ('siderite', 'Siderite'), ('ankerite', 'Ankerite'), ('kaolinite', 'Kaolinite'), ('illite', 'Illite'), ('smectite', 'Smectite'), ('montmorillonite', 'Montmorillonite'), ('vermiculite', 'Vermiculite'), ('glauconite', 'Glauconite'), ('other', 'Other')], help_text='Name of the identified mineral', max_length=50)),
                ('percentage', models.FloatField(blank=True, help_text='Percentage of this mineral in the sample', null=True)),
                ('other_mineral_name', models.CharField(blank=True, help_text="Custom mineral name if 'other' is selected", max_length=100, null=True)),
                ('analysis_method', models.CharField(blank=True, help_text='Analysis method used (e.g., XRD, XRF)', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the mineral analysis', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('core', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mineralogy_analyses', to='plotter.core')),
            ],
            options={
                'verbose_name': 'Mineralogy Analysis',
                'verbose_name_plural': 'Mineralogy Analyses',
                'ordering': ['sampling_depth_start', 'analysis_type', '-percentage'],
            },
        ),
        migrations.CreateModel(
            name='GrainSize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sampling_depth_start', models.FloatField(help_text='Start sampling depth in meters')),
                ('sampling_depth_end', models.FloatField(help_text='End sampling depth in meters')),
                ('lithology', models.CharField(help_text='Rock type or lithology description', max_length=100)),
                ('gravel_percent', models.FloatField(blank=True, help_text='Gravel percentage', null=True)),
                ('coarse_sand_percent', models.FloatField(blank=True, help_text='Coarse sand percentage', null=True)),
                ('medium_sand_percent', models.FloatField(blank=True, help_text='Medium sand percentage', null=True)),
                ('fine_sand_percent', models.FloatField(blank=True, help_text='Fine sand percentage', null=True)),
                ('very_fine_sand_percent', models.FloatField(blank=True, help_text='Very fine sand percentage', null=True)),
                ('silt_percent', models.FloatField(blank=True, help_text='Silt percentage', null=True)),
                ('clay_percent', models.FloatField(blank=True, help_text='Clay percentage', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('core', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grain_sizes', to='plotter.core')),
            ],
            options={
                'verbose_name': 'Grain Size Analysis',
                'verbose_name_plural': 'Grain Size Analyses',
                'ordering': ['sampling_depth_start'],
                'unique_together': {('core', 'sampling_depth_start', 'sampling_depth_end')},
            },
        ),
    ]
